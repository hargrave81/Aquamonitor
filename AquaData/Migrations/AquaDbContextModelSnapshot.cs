// <auto-generated />
using System;
using AquaMonitor.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace AquaMonitor.Data.Migrations
{
    [DbContext(typeof(AquaDbContext))]
    partial class AquaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("AquaMonitor.Data.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("APIKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminPassword")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("fishy");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<int>("DataCollectionRate")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SettingA")
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingB")
                        .HasColumnType("TEXT");

                    b.Property<string>("SettingC")
                        .HasColumnType("TEXT");

                    b.Property<int>("TempPin")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TempType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zipcode")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.HistoryRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("CloudCoverage")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("Created")
                        .HasColumnType("TEXT");

                    b.Property<double>("Humidity")
                        .HasColumnType("REAL");

                    b.Property<double>("OutsideHumidity")
                        .HasColumnType("REAL");

                    b.Property<double>("OutsideTempC")
                        .HasColumnType("REAL");

                    b.Property<double>("OutsideTempF")
                        .HasColumnType("REAL");

                    b.Property<bool?>("Rain")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Serialize")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Sunrise")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("Sunset")
                        .HasColumnType("TEXT");

                    b.Property<bool>("SystemRunning")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TempC")
                        .HasColumnType("REAL");

                    b.Property<double>("TempF")
                        .HasColumnType("REAL");

                    b.Property<double?>("WindSpeed")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Records");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.PowerReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HistoryRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("PowerState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ReaderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HistoryRecordId");

                    b.ToTable("PowerReading");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.PowerRelay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrentState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Interval")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IntervalRun")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Letter")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("MaxOutTempF")
                        .HasColumnType("REAL");

                    b.Property<double?>("MaxTempF")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinOutTempF")
                        .HasColumnType("REAL");

                    b.Property<double?>("MinTempF")
                        .HasColumnType("REAL");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("OnWhenFloatHigh")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Pin")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan?>("Start")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan?>("Stop")
                        .HasColumnType("TEXT");

                    b.Property<double?>("TempVariance")
                        .HasColumnType("REAL");

                    b.Property<int?>("WaterId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Relays");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.Reading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("IdealMax")
                        .HasColumnType("REAL");

                    b.Property<double>("IdealMin")
                        .HasColumnType("REAL");

                    b.Property<string>("Location")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT");

                    b.Property<int>("Scale")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Taken")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.WaterLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("FloatHigh")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Pin")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("WaterLevels");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.WaterReading", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HistoryRecordId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReaderId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("WaterLevelHigh")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("HistoryRecordId");

                    b.ToTable("WaterReading");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.PowerReading", b =>
                {
                    b.HasOne("AquaMonitor.Data.Models.HistoryRecord", null)
                        .WithMany("PowerReadings")
                        .HasForeignKey("HistoryRecordId");
                });

            modelBuilder.Entity("AquaMonitor.Data.Models.WaterReading", b =>
                {
                    b.HasOne("AquaMonitor.Data.Models.HistoryRecord", null)
                        .WithMany("WaterReadings")
                        .HasForeignKey("HistoryRecordId");
                });
#pragma warning restore 612, 618
        }
    }
}
